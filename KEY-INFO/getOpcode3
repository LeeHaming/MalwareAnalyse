if portion[1]==".apk":
    newname=portion[0]+".zip"
    print(newname)
    os.rename(os.path.join(dir[0],APK),os.path.join(dir[0],newname))
    print(newname)
    if newname.endswith(".zip"):
        try:
            apkname=portion[0]
            zip_apk_path=os.path.join(dir[0],newname)
            z=zipfile.ZipFile(zip_apk_path,"r")

            for filename in z.namelist():
                if filename.endswith(".dex"):        
                    dexfilename=apkname+".dex"
                    dexfilepath=os.path.join(dex_path,dexfilename)
                    f=open(dexfilepath,"wb")


#dex获取smalis
dexlist=os.listdir(dex_path)
for DEX in dexlist:
    if DEX.endswith('.dex'):
        print((DEX.split('.'))[0])
        smalis-opcode/dest/%s " %((DEX.split('.'))[0]) +"E:/MalwareAnalyse/smalis-opcode/smalis/")
        try:
            os.popen("java -jar D:/apk-reverse-Tools/baksmali-2.1.3.jar -o E:/MalwareAnalyse/smalis-opcode/smalis/%s "%((DEX.split('.'))[0]) +"E:/MalwareAnalyse/smalis-opcode/dest/%s" %(DEX))
        finally:
            print("finished----------------------")

#遍历smalis,同时提取出字节码并统计频数
    for f in smali_file_List:
        if f.endswith(".smali"):
            try:
                print('find smali:',f)
                with open(f,mode="r") as bigfile:
                    reader=bigfile.read()
                    for i,part in enumerate(reader.split(".method")):
                        add_newline=False
                        if i!=0:
                            #fp=open(apkDir+".txt",mode="w+")
                            method_part=part.split(".end method")[0]
                            method_body=method_part.split('\n')
                            for line in method_body:
                                if not line.strip().startswith('.') and not line.strip().startswith('#') and not line.strip().startswith(':') and line.strip():
                                    method_line=line.strip().split()
                                    #fp.write(method_line[0]+'\n')
                                    #print(method_line[0])
                                    dic[(method_line[0])]+=1



#字节码映射并获取opcode3grams向量
for file in files:
    if file.endswith(".txt"):
        oplist=[]

        with open(file) as opFile:
            lines=opFile.readlines();
            for line in lines:
                if(line.startswith('move')):
                    oplist.append('M')
                elif(line.startswith('return')):
                    oplist.append('R')
                elif(line.startswith('goto')):
                    oplist.append('G')
                elif(line.startswith('if-')):
                    oplist.append('I')
                elif(line.startswith('aget') or line.startswith('iget') or line.startswith('sget')):
                    oplist.append('T')
                elif(line.startswith('aput') or line.startswith('iput') or line.startswith('sput')):
                    oplist.append('P')
                elif(line.startswith('invoke-')):
                    oplist.append('V')
                else:
                    continue
        #print(oplist)

        opngramlist=[tuple(oplist[i:i+3]) for i in range(len(oplist)-3)]
        opngram=Counter(opngramlist)
        #print(opngram)

>>>获取Dex文件的方式/工具：
将apk文件后缀名改为.zip,然后从压缩包中找到后缀名为.dex文件

>>>获取smali文件方法：
获取.dex文件
使用baksmali工具得到smali文件
Smali，Baksmali分别是指安卓系统里的Java虚拟机（Dalvik）所使用的一种.dex格式文件的汇编器，反汇编器。
java -jar baksmali-1.3.2.jar -o classout/ classes.dex   
java -jar smali-1.3.2.jar classout/ -o classes.dex


#某apk下的某个smali文件
.class public Lcom/qihoo/util/QHDialog;
.super Ljava/lang/Object;
.source "SourceFile"

# direct methods
.method public constructor <init>()V
    .registers 1

    .prologue
    .line 11
    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    return-void
.end method

.method public static showDialog(Landroid/content/Context;Ljava/lang/String;)V
    .registers 6

    .prologue
    .line 13
    new-instance v1, Ljava/lang/Thread;

    new-instance v0, Lcom/qihoo/util/ᵢˋ;

    invoke-direct {v0, p0, p1}, Lcom/qihoo/util/ᵢˋ;-><init>(Landroid/content/Context;Ljava/lang/String;)V

    invoke-direct {v1, v0}, Ljava/lang/Thread;-><init>(Ljava/lang/Runnable;)V

    .line 35
    monitor-enter v1

    .line 37
    :try_start_b
    invoke-virtual {v1}, Ljava/lang/Thread;->start()V

    .line 38
    sget v0, Landroid/os/Build$VERSION;->SDK_INT:I

    const/16 v2, 0x13

    if-lt v0, v2, :cond_19

    .line 39
    invoke-virtual {v1}, Ljava/lang/Object;->wait()V
    :try_end_17
    .catch Ljava/lang/InterruptedException; {:try_start_b .. :try_end_17} :catch_1f
    .catchall {:try_start_b .. :try_end_17} :catchall_21

    .line 44
    :goto_17
    :try_start_17
    monitor-exit v1
    :try_end_18
    .catchall {:try_start_17 .. :try_end_18} :catchall_21

    return-void

    .line 41
    :cond_19
    const-wide/16 v2, 0xbb8

    :try_start_1b
    invoke-static {v2, v3}, Ljava/lang/Thread;->sleep(J)V
    :try_end_1e
    .catch Ljava/lang/InterruptedException; {:try_start_1b .. :try_end_1e} :catch_1f
    .catchall {:try_start_1b .. :try_end_1e} :catchall_21

    goto :goto_17

    :catch_1f
    move-exception v0

    goto :goto_17

    .line 44
    :catchall_21
    move-exception v0

    :try_start_22
    monitor-exit v1
    :try_end_23
    .catchall {:try_start_22 .. :try_end_23} :catchall_21

    throw v0
.end method
